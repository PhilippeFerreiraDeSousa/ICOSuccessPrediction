train.rf <- train(label_disappeared ~ X45d + Social,
data = train_data.rf,
method = "rf",
na.action  = na.omit,
tuneGrid = data.frame(mtry=1:2),
trControl = trainControl(method="cv", number=5, verboseIter = TRUE, summaryFunction = f1),
metric = "F1")
f1 <- function (data, lev = NULL, model = NULL) {
pred <- data$pred[!is.na(data$pred)&!is.na(data$obs)]
obs <- data$obs[!is.na(data$pred)&!is.na(data$obs)]
precision <- posPredValue(pred, obs, positive = lev[2])
recall  <- sensitivity(pred, obs, postive = lev[1])
f1_val <- (2 * precision * recall) / (precision + recall)
names(f1_val) <- c("F1")
print(precision)
print(recall)
print(lev[1])
print(lev[2])
f1_val
}
# X30d + X45d + X90d + X200d + Total.Supply + Age..mo.
# 4      11     22     48      9              1
train_data.rf <- train_data
train_data.rf[is.na(train_data.rf)] <- 0
train.rf <- train(label_disappeared ~ X45d + Social,
data = train_data.rf,
method = "rf",
na.action  = na.omit,
tuneGrid = data.frame(mtry=1:2),
trControl = trainControl(method="cv", number=5, verboseIter = TRUE, summaryFunction = f1),
metric = "F1")
f1 <- function (data, lev = NULL, model = NULL) {
pred <- data$pred[!is.na(data$pred)&!is.na(data$obs)]
obs <- data$obs[!is.na(data$pred)&!is.na(data$obs)]
precision <- posPredValue(pred, obs, positive = lev[2])
recall  <- sensitivity(pred, obs, postive = lev[1])
f1_val <- (2 * precision * recall) / (precision + recall)
names(f1_val) <- c("F1")
print(precision)
print(recall)
print(f1_val)
f1_val
}
# X30d + X45d + X90d + X200d + Total.Supply + Age..mo.
# 4      11     22     48      9              1
#train_data.rf <- train_data
#train_data.rf[is.na(train_data.rf)] <- 1
train.rf <- train(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business,
data = train_data,
method = "rf",
na.action  = na.omit,
tuneGrid = data.frame(mtry=1:7),
trControl = trainControl(method="cv", number=5, verboseIter = TRUE, summaryFunction = f1),
metric = "F1")
train.rf$results
train.rf
best.rf <- train.rf$finalModel
pred.rf <- predict(best.rf, newdata = test_data.mm) # can use same model matrix
ggplot(train.rf$results, aes(x = mtry, y = F1)) + geom_point(size = 3) +
ylab("CV F1") + theme_bw() + theme(axis.title=element_text(size=18), axis.text=element_text(size=18))
names(pred.rf)
pred.rf
train.rf$results
table(train_data$label_disappeared)
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 3, nodesize = 5, ntree = 500,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples))
pred.rf <- predict(mod.rf, newdata = test_data) # just to illustrate
importance(mod.rf)
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 3, nodesize = 5, ntree = 500,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
pred.rf <- predict(mod.rf, newdata = test_data) # just to illustrate
importance(mod.rf)
print(rf.strata)
print(mod.rf.strata)
print(mod.rf)
summary(mod.rf)
mod.rf$results
names(mod.rf)
mod.rf$importance
pred.rf <- predict(mod.rf, newdata = test_data.mm)
pred.rf
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
test.data.mm$label_disappeared
test_data.mm$label_disappeared
test_data.mm$
test_data.mm
train_data.mm = as.data.frame(model.matrix(label_disappeared ~ Price + X1h + X24h + X7d + X14d + X30d + X45d + X90d + X200d +
Mkt..Cap + X24h.Vol + Circ..Supply + Total.Supply + Team + Product + Coin + Social + Communication + Business + Avg..volume + Age..mo., data = train_data))
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ Price + X1h + X24h + X7d + X14d + X30d + X45d + X90d + X200d +
Mkt..Cap + X24h.Vol + Circ..Supply + Total.Supply + Team + Product + Coin + Social + Communication + Business + Avg..volume + Age..mo., data = test_data))
test_data.mm
test_data.mm$label_disappeared
train_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data))
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data))
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 3, nodesize = 5, ntree = 500,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
pred.rf <- predict(mod.rf, newdata = test_data) # just to illustrate
print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data.mm)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 3, nodesize = 5, ntree = 1000,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
pred.rf <- predict(mod.rf, newdata = test_data) # just to illustrate
print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data.mm)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
nrow(test_data$label_disappeared)
test_data
test_data$label_disappeared
nrow(test_data$label_disappeared)
length(test_data$label_disappeared)
pred.rf
length(pred.rf)
length(test_data)
nrow(test_data)
length(pred.rf)
length(test_data$label_disappeared)
nrow(test_data.mm)
length(test_data$label_disappeared)
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data))
nrow(test_data.mm)
nrow(test_data)
pred.rf <- predict(mod.rf, newdata = test_data)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
plot(roc(mod.rf$votes[, 2], train_data$label_disappeared),col=2,add=T)
library(AUC)
install.packages("AUC")
plot(roc(mod.rf$votes[, 2], train_data$label_disappeared),col=2,add=T)
install.packages("pROC")
library(AUC)
plot(roc(mod.rf$votes[, 2], train_data$label_disappeared),col=2,add=T)
library(AUC)
plot(roc(mod.rf$votes[, 2], train_data$label_disappeared),col=2,add=T)
ggplot(roc(mod.rf$votes[, 2], train_data$label_disappeared),col=2,add=T)
plot.roc(mod.rf$votes[, 2], train_data$label_disappeared,col=2,add=T)
library("pROC")
plot.roc(mod.rf$votes[, 2], train_data$label_disappeared,col=2,add=T)
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 1, nodesize = 5, ntree = 1000,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
# #2 - Balancing by sampling stratification
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 3, nodesize = 5, ntree = 1000,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 5, nodesize = 5, ntree = 1000,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
1:3:5
1:5
1:2:5
1:5:2
for (mtry in seq(1, 5, by=2)) {
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 5, nodesize = 5, ntree = 1000,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
# print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
}
for (mtry in seq(1, 5, by=2)) {
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = 5, nodesize = 5, ntree = 1000,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
# print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
}
for (mtry in seq(1, 5, by=2)) {
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = mtry, nodesize = 5, ntree = 1000,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
# print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data)
table(test_data$label_disappeared, pred.rf)
tableAccuracy(test_data$label_disappeared, pred.rf)
tableTPR(test_data$label_disappeared, pred.rf)
tableFPR(test_data$label_disappeared, pred.rf)
}
for (mtry in seq(1, 5, by=2)) {
set.seed(42)
rare.class.prevalence = 0.2
nRareSamples = 1000 * rare.class.prevalence
mod.rf <- randomForest(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data, mtry = mtry, nodesize = 5, ntree = 1000,strata=train_data$label_disappeared,
sampsize=c(nRareSamples,nRareSamples), na.action = na.omit)
# print(mod.rf)
pred.rf <- predict(mod.rf, newdata = test_data)
print(table(test_data$label_disappeared, pred.rf))
print(tableAccuracy(test_data$label_disappeared, pred.rf))
print(tableTPR(test_data$label_disappeared, pred.rf))
print(tableFPR(test_data$label_disappeared, pred.rf))
}
set.seed(42)
train.boost <- train(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business,
data = train_data,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy",
distribution = "gaussian")
train.boost
best.boost <- train.boost$finalModel
set.seed(42)
train.boost <- train(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business,
data = train_data,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy",
distribution = "gaussian",
na.action = na.omit)
tGrid = expand.grid(n.trees = (1:10)*1000, interaction.depth = c(1,2,4,6,8,10),
shrinkage = 0.001, n.minobsinnode = 10)
set.seed(42)
train.boost <- train(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business,
data = train_data,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy",
distribution = "gaussian",
na.action = na.omit)
warnings()
tGrid = expand.grid(n.trees = (1:2)*1000, interaction.depth = c(1,2),
shrinkage = 0.001, n.minobsinnode = 10)
set.seed(42)
train.boost <- train(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business,
data = train_data,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy",
distribution = "gaussian",
na.action = na.omit)
tGrid = expand.grid(n.trees = (1:2)*1000, interaction.depth = c(1,2),
shrinkage = 0.001, n.minobsinnode = 10)
set.seed(42)
train.boost <- train(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business,
data = train_data.rf,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy",
distribution = "gaussian",
na.action = na.omit)
train.boost <- train(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business,
data = train_data.rf,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
distribution = "gaussian",
na.action = na.omit)
train.boost <- train(label_disappeared ~ X24h + X14d + Social + Mkt..Cap + Business,
data = train_data.rf,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy",
distribution = "gaussian",
na.action = na.omit)
train.boost <- train(label_disappeared ~ X24h + X14d + Social + Mkt..Cap + Business,
data = train_data.rf,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy",
na.action = na.omit)
train.boost
best.boost <- train.boost$finalModel
ggplot(train.boost$results, aes(x = n.trees, y = Rsquared, colour = as.factor(interaction.depth))) + geom_line() +
ylab("CV Rsquared") + theme_bw() + theme(axis.title=element_text(size=18), axis.text=element_text(size=18)) +
scale_color_discrete(name = "interaction.depth")
ggplot(train.boost$results, aes(x = n.trees, y = Accuracy, colour = as.factor(interaction.depth))) + geom_line() +
ylab("CV Accuracy") + theme_bw() + theme(axis.title=element_text(size=18), axis.text=element_text(size=18)) +
scale_color_discrete(name = "interaction.depth")
tGrid = expand.grid(n.trees = (1:10)*1000, interaction.depth = c(1,2,4,6,8,10),
shrinkage = 0.001, n.minobsinnode = 10)
set.seed(42)
train.boost <- train(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business,
data = train_data,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy",
na.action = na.omit)
train.boost
best.boost <- train.boost$finalModel
ggplot(train.boost$results, aes(x = n.trees, y = Accuracy, colour = as.factor(interaction.depth))) + geom_line() +
ylab("CV Accuracy") + theme_bw() + theme(axis.title=element_text(size=18), axis.text=element_text(size=18)) +
scale_color_discrete(name = "interaction.depth")
pred.best.boost <- predict(best.boost, newdata = test_data, n.trees = 2000, interaction.depth=8, shrinkage = 0.001, n.minobsinnode = 10)# from CV plot
pred.best.boost <- predict(best.boost, newdata = test_data)# from CV plot
pred.best.boost <- predict(best.boost, newdata = test_data, n.trees = 2000, interaction.depth=8, shrinkage = 0.001, n.minobsinnode = 10)# from CV plot
pred.best.boost <- predict(best.boost, newdata = test_data, n.trees = 2000)# from CV plot
pred.best.boost <- predict(best.boost, newdata = test_data.mm, n.trees = 2000)# from CV plot
pred.rf <- predict(best.rf, newdata = test_data) # can use same model matrix
pred.best.boost$label_disappeared
table(test_data$label_disappeared, pred.best.boost)
test_data.mm[[label_disappeared]]
test_data.mm[["label_disappeared"]]
test_data.mm["label_disappeared"]
test_data.mm$label_disappeared
names(test_data.mm)
lenght(pred.best.boost)
length(pred.best.boost)
length(test_data.mm$label_disappeared)
length(test_data$label_disappeared)
test_data$label_disappeared
pred.best.boost
pred.best.boost <- predict(best.boost, newdata = test_data.mm, n.trees = 2000, type="class")# from CV plot
table(test_data.mm$label_disappeared, pred.best.boost)
nrow(test_data)
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data))
nrow(test_data.mm)
nrow(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data))
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data, na.action = "na.pass"))
nrow(test_data.mm)
nrow(test_data)
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data, na.action = "na.pass"))
nrow(test_data.mm)
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data, na.action = na.pass))
nrow(test_data.mm)
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data.rf))
test_data_filled_with_0 <- train_data
test_data_filled_with_0[is.na(test_data_filled_with_0)] <- 0
train_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data))
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data_filled_with_0))
nrow(test_data.mm)
nrow(test_data)
test_data_filled_with_0 <- test_data
test_data_filled_with_0[is.na(test_data_filled_with_0)] <- 0
train_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = train_data))
test_data.mm = as.data.frame(model.matrix(label_disappeared ~ X24h + X14d + X45d + Social + Mkt..Cap + Age..mo. + Business, data = test_data_filled_with_0))
nrow(test_data.mm)
pred.best.boost <- predict(best.boost, newdata = test_data.mm, n.trees = 2000)# from CV plot
table(test_data.mm$label_disappeared, pred.best.boost)
test_data.mm$label_disappeared
table(test_data$label_disappeared, pred.best.boost)
table(test_data$label_disappeared, pred.best.boost>0.2)
table(test_data$label_disappeared, pred.best.boost>0.5)
table(test_data$label_disappeared, pred.best.boost>0.7)
tableAccuracy(test_data$label_disappeared, pred.best.boost>0.7)
tableTPR(test_data$label_disappeared, pred.best.boost>0.7)
tableFPR(test_data$label_disappeared, pred.best.boost>0.7)
train.rf <- train(label_disappeared ~ X24h + X7d + X200d + Mkt..Cap + Age..mo. + Business,
data = train_data,
method = "rf",
na.action  = na.omit,
tuneGrid = data.frame(mtry=1:6),
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
metric = "Accuracy")
train.rf$results
train.rf
best.rf <- train.rf$finalModel
pred.rf <- predict(best.rf, newdata = test_data.mm) # can use same model matrix
ggplot(train.rf$results, aes(x = mtry, y = Accuracy)) + geom_point(size = 3) +
ylab("CV Accuracy") + theme_bw() + theme(axis.title=element_text(size=18), axis.text=element_text(size=18))
tGrid = expand.grid(n.trees = (1:10)*1000, interaction.depth = c(1,2,4,6,8,10),
shrinkage = 0.001, n.minobsinnode = 10)
set.seed(42)
train.boost <- train(price_log_diff ~ X24h + X7d + X200d + Mkt..Cap + Age..mo. + Business,
data = price_train_data,
method = "gbm",   ## gradient boosting machine
tuneGrid = tGrid,
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
distribution = "gaussian",
metric = "RMSE",
na.action = na.omit)
train.boost
best.boost <- train.boost$finalModel
ggplot(train.boost$results, aes(x = n.trees, y = Rsquared, colour = as.factor(interaction.depth))) + geom_line() +
ylab("CV Rsquared") + theme_bw() + theme(axis.title=element_text(size=18), axis.text=element_text(size=18)) +
scale_color_discrete(name = "interaction.depth")
pred.best.boost <- predict(best.boost, newdata = test_data.mm, n.trees = 10000, interaction.depth=10)# from CV plot
pred.best.boost <- predict(best.boost, newdata = price_test_data.mm, n.trees = 10000, interaction.depth=10)# from CV plot
pred.best.boost <- predict(best.boost, newdata = price_test_data_log.mm, n.trees = 10000, interaction.depth=10)# from CV plot
price_test_data_filled_with_0 <- price_test_data
price_test_data_filled_with_0[is.na(price_test_data_filled_with_0)] <- 0
price_test_data_log.mm = as.data.frame(model.matrix(price_log_diff ~ X24h + X7d + X200d + Mkt..Cap + Age..mo. + Business, data = price_test_data_filled_with_0))
pred.best.boost <- predict(best.boost, newdata = price_test_data_log.mm, n.trees = 10000, interaction.depth=10)# from CV plot
pred.best.boost <- predict(best.boost, newdata = price_test_data_log.mm, n.trees = 9000, interaction.depth=10)# from CV plot
pred.best.boost <- predict(best.boost, newdata = price_test_data_log.mm, n.trees = 10000, interaction.depth=10, shrinkage = 0.001, n.minobsinnode = 10)# from CV plot
train.boost
best.boost <- train.boost$finalModel
pred.best.boost <- predict(best.boost, newdata = price_test_data_log.mm, n.trees = 10000, interaction.depth=10, shrinkage = 0.001, n.minobsinnode = 10)# from CV plot
all_metrics(price_test_data$price_log_diff, pred_lm_log, price_train_data$price_log_diff)
pred.best.boost <- predict(best.boost, newdata = price_test_data_log.mm)# from CV plot
pred.best.boost <- predict(best.boost, newdata = price_test_data_log.mm, n.trees = 10000, interaction.depth=10, shrinkage = 0.001, n.minobsinnode = 10)# from CV plot
pred.best.boost <- predict(best.boost, newdata = price_test_data_log.mm, n.trees = 10000)# from CV plot
library(gbm)
mod.boost <- gbm(price_log_diff ~ X24h + X7d + X200d + Mkt..Cap + Age..mo. + Business,
data = price_train_data,
trControl = trainControl(method="cv", number=5),
distribution = "gaussian",
metric = "RMSE",
na.action = na.omit,
n.trees = 10000,
shrinkage = 0.001,
interaction.depth = 10)
# NOTE: we need to specify number of trees to get a prediction for boosting
pred.boost <- predict(mod.boost, newdata = price_test_data_log.mm, n.trees=10000)
mod.boost <- gbm(price_log_diff ~ X24h + X7d + X200d + Mkt..Cap + Age..mo. + Business,
data = price_train_data,
trControl = trainControl(method="cv", number=5),
distribution = "gaussian",
metric = "RMSE",
n.trees = 10000,
shrinkage = 0.001,
interaction.depth = 10)
all_metrics(price_test_data$price_log_diff, mean(price_train_data$price_log_diff), price_train_data$price_log_diff)
sum(is.na(price_test_data$price_log_diff))
sum(is.na(price_train_data$price_log_diff))
l_metrics <- function(responses, predictions, train_responses) {
#filter_vec = !is.na(responses) & !is.na(predictions)
#responses <- responses[filter_vec]
#predictions <- predictions[filter_vec]
#train_responses <- train_responses[filter_vec]
mse <- mean_squared_error(responses, predictions)
mae <- mean_absolute_error(responses, predictions)
OSR2 <- OS_R_squared(responses, predictions, train_responses)
return(c(mse, mae, OSR2))
}
all_metrics(price_test_data$price_log_diff, mean(price_train_data$price_log_diff), price_train_data$price_log_diff)
mean_squared_error(price_test_data$price_log_diff, mean(price_train_data$price_log_diff))
mean_absolute_error(price_test_data$price_log_diff, mean(price_train_data$price_log_diff))
OS_R_squared(price_test_data$price_log_diff, mean(price_train_data$price_log_diff), price_train_data$price_log_diff))
OS_R_squared(price_test_data$price_log_diff, mean(price_train_data$price_log_diff), price_train_data$price_log_diff)
all_metrics(price_test_data$price_log_diff, pred.boost, price_train_data$price_log_diff)
pred.boost <- predict(mod.boost, newdata = price_test_data_log.mm, n.trees=10000)
library(gbm)
mod.boost <- gbm(price_log_diff ~ X24h + X7d + X200d + Mkt..Cap + Age..mo. + Business,
data = price_train_data,
distribution = "gaussian",
n.trees = 10000,
shrinkage = 0.001,
interaction.depth = 10)
# NOTE: we need to specify number of trees to get a prediction for boosting
pred.boost <- predict(mod.boost, newdata = price_test_data_log.mm, n.trees=10000)
all_metrics(price_test_data$price_log_diff, pred.boost, price_train_data$price_log_diff)
all_metrics(price_test_data$price_log_diff, pred.rf, price_train_data$price_log_diff)
train.rf <- train(price_log_diff ~ X24h + X7d + X200d + Mkt..Cap + Age..mo. + Business,
data = price_train_data,
method = "rf",
na.action  = na.omit,
tuneGrid = data.frame(mtry=1:6),
trControl = trainControl(method="cv", number=5, verboseIter = TRUE),
distribution = "gaussian",
metric = "RMSE")
train.rf$results
train.rf
best.rf <- train.rf$finalModel
pred.rf <- predict(best.rf, newdata = price_test_data_log.mm)
all_metrics(price_test_data$price_log_diff, pred.rf, price_train_data$price_log_diff)
